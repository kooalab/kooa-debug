{
  "version": 3,
  "sources": ["../../@swup/head-plugin/src/mergeHeadContents.ts", "../../@swup/head-plugin/src/waitForAssets.ts", "../../@swup/head-plugin/src/index.ts", "../../@swup/head-plugin/src/updateLangAttribute.ts", "../../@swup/head-plugin/src/waitForStylesheet.ts"],
  "sourcesContent": ["type ElementCollection = { el: Element; index?: number }[];\n\nexport default function mergeHeadContents(\n\tcurrentHead: HTMLHeadElement,\n\tnewHead: HTMLHeadElement,\n\t{ shouldPersist = () => false }: { shouldPersist?: (el: Element) => boolean } = {}\n) {\n\tconst currentTags = Array.from(currentHead.children);\n\tconst newChildren = Array.from(newHead.children);\n\n\tconst addTags = getTagsToAdd(currentTags, newChildren);\n\tconst removeTags = getTagsToRemove(currentTags, newChildren);\n\n\t// Remove tags in reverse to keep indexes, keep persistant elements\n\tremoveTags\n\t\t.reverse()\n\t\t.filter(({ el }) => shouldManageTag(el))\n\t\t.filter(({ el }) => !shouldPersist(el))\n\t\t.forEach(({ el }) => currentHead.removeChild(el));\n\n\t// Insert tag *after* previous version of itself to preserve JS variable scope and CSS cascade\n\taddTags\n\t\t.filter(({ el }) => shouldManageTag(el))\n\t\t.forEach(({ el, index = 0 }) => {\n\t\t\tcurrentHead.insertBefore(el, currentHead.children[index + 1] || null);\n\t\t});\n\n\treturn {\n\t\tremoved: removeTags.map(({ el }) => el),\n\t\tadded: addTags.map(({ el }) => el)\n\t};\n}\n\nfunction getTagsToRemove(currentEls: Element[], newEls: Element[]): ElementCollection {\n\treturn currentEls.reduce((tags, el) => {\n\t\tconst isAmongNew = newEls.some((newEl) => compareTags(el, newEl));\n\t\tif (!isAmongNew) {\n\t\t\ttags.push({ el });\n\t\t}\n\t\treturn tags;\n\t}, [] as ElementCollection);\n}\n\nfunction getTagsToAdd(currentEls: Element[], newEls: Element[]): ElementCollection {\n\treturn newEls.reduce((tags, el, index) => {\n\t\tconst isAmongCurrent = currentEls.some((currentEl) => compareTags(el, currentEl));\n\t\tif (!isAmongCurrent) {\n\t\t\ttags.push({ el, index });\n\t\t}\n\t\treturn tags;\n\t}, [] as ElementCollection);\n}\n\nfunction shouldManageTag(el: Element) {\n\t// Let swup manage the title tag\n\tif (el.localName === 'title') {\n\t\treturn false;\n\t}\n\t// Leave swup theme styles untouched\n\tif (el.matches('[data-swup-theme]')) {\n\t\treturn false;\n\t}\n\treturn true;\n}\n\nfunction compareTags(oldTag: Element, newTag: Element) {\n\treturn oldTag.outerHTML === newTag.outerHTML;\n}\n", "import waitForStylesheet from './waitForStylesheet.js';\n\nfunction isStylesheet(el: Element): el is HTMLLinkElement {\n\treturn el.matches('link[rel=stylesheet][href]');\n}\n\nexport default function waitForAssets(elements: Element[], timeoutMs: number = 0) {\n\treturn elements.filter(isStylesheet).map((el) => waitForStylesheet(el, timeoutMs));\n}\n", "import { Handler } from 'swup';\nimport Plugin from '@swup/plugin';\n\nimport mergeHeadContents from './mergeHeadContents.js';\nimport updateLangAttribute from './updateLangAttribute.js';\nimport waitForAssets from './waitForAssets.js';\n\ntype Options = {\n\t/** Whether to keep orphaned `link`, `style` and `script` tags from the old page. Default: `false` */\n\tpersistAssets: boolean;\n\t/** Tags that will be persisted when a new page is loaded. Boolean, selector or predicate function. Default: `false` */\n\tpersistTags: boolean | string | ((el: Element) => boolean);\n\t/** Delay the transition to the new page until all newly added assets have finished loading. Default: `false` */\n\tawaitAssets: boolean;\n\t/** How long to wait for assets before continuing anyway. Only applies if `awaitAssets` is enabled. Default: `3000` */\n\ttimeout: number;\n};\n\nexport default class SwupHeadPlugin extends Plugin {\n\tname = 'SwupHeadPlugin';\n\n\trequires = { swup: '>=4' };\n\n\tdefaults: Options = {\n\t\tpersistTags: false,\n\t\tpersistAssets: false,\n\t\tawaitAssets: false,\n\t\ttimeout: 3000\n\t};\n\toptions: Options;\n\n\tconstructor(options: Partial<Options> = {}) {\n\t\tsuper();\n\n\t\tthis.options = { ...this.defaults, ...options };\n\n\t\t// persistAssets is a shortcut for: persistTags with a default asset selector for scripts & styles\n\t\tif (this.options.persistAssets && !this.options.persistTags) {\n\t\t\tthis.options.persistTags = 'link[rel=stylesheet], script[src], style';\n\t\t}\n\t}\n\n\tmount() {\n\t\tthis.before('content:replace', this.updateHead);\n\t}\n\n\tupdateHead: Handler<'content:replace'> = async (visit, { page: { html } }) => {\n\t\tconst newDocument = new DOMParser().parseFromString(html, 'text/html');\n\n\t\tconst { removed, added } = mergeHeadContents(document.head, newDocument.head, {\n\t\t\tshouldPersist: (el) => this.isPersistentTag(el)\n\t\t});\n\t\tthis.swup.log(`Removed ${removed.length} / added ${added.length} tags in head`);\n\n\t\tconst lang = updateLangAttribute(document.documentElement, newDocument.documentElement);\n\t\tif (lang) {\n\t\t\tthis.swup.log(`Updated lang attribute: ${lang}`);\n\t\t}\n\n\t\tif (this.options.awaitAssets) {\n\t\t\tconst assetLoadPromises = waitForAssets(added, this.options.timeout);\n\t\t\tif (assetLoadPromises.length) {\n\t\t\t\tthis.swup.log(`Waiting for ${assetLoadPromises.length} assets to load`);\n\t\t\t\tawait Promise.all(assetLoadPromises);\n\t\t\t}\n\t\t}\n\t};\n\n\tisPersistentTag(el: Element) {\n\t\tconst { persistTags } = this.options;\n\t\tif (typeof persistTags === 'function') {\n\t\t\treturn persistTags(el);\n\t\t}\n\t\tif (typeof persistTags === 'string') {\n\t\t\treturn el.matches(persistTags);\n\t\t}\n\t\treturn Boolean(persistTags);\n\t}\n}\n", "export default function updateLangAttribute(\n\tcurrentHtml: HTMLElement,\n\tnewHtml: HTMLElement\n): string | null {\n\tif (currentHtml.lang !== newHtml.lang) {\n\t\tcurrentHtml.lang = newHtml.lang;\n\t\treturn currentHtml.lang;\n\t} else {\n\t\treturn null;\n\t}\n}\n", "export default function waitForStylesheet(element: HTMLLinkElement, timeoutMs: number = 0) {\n\tconst isLoaded = ({ href }: HTMLLinkElement) => {\n\t\treturn Array.from(document.styleSheets)\n\t\t\t.map(({ href }) => href)\n\t\t\t.includes(href);\n\t};\n\n\tconst whenLoaded = (cb: (value?: unknown) => void) => {\n\t\tif (isLoaded(element)) {\n\t\t\tcb();\n\t\t} else {\n\t\t\tsetTimeout(() => whenLoaded(cb), 10);\n\t\t}\n\t};\n\n\treturn new Promise((resolve) => {\n\t\twhenLoaded(resolve);\n\t\tif (timeoutMs > 0) {\n\t\t\tsetTimeout(resolve, timeoutMs);\n\t\t}\n\t});\n}\n"],
  "mappings": "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",
  "names": ["shouldManageTag", "el", "localName", "matches", "compareTags", "oldTag", "newTag", "outerHTML", "isStylesheet", "SwupHeadPlugin", "Plugin", "constructor", "options", "_this", "super", "this", "name", "requires", "swup", "defaults", "persistTags", "persistAssets", "awaitAssets", "timeout", "updateHead", "async", "visit", "page", "html", "newDocument", "DOMParser", "parseFromString", "removed", "added", "currentHead", "newHead", "shouldPersist", "currentTags", "Array", "from", "children", "newChildren", "addTags", "currentEls", "reduce", "tags", "index", "some", "currentEl", "push", "removeTags", "newEls", "newEl", "reverse", "filter", "forEach", "removeChild", "insertBefore", "map", "document", "head", "isPersistentTag", "log", "length", "lang", "currentHtml", "documentElement", "newHtml", "assetLoadPromises", "elements", "timeoutMs", "element", "whenLoaded", "cb", "isLoaded", "href", "styleSheets", "includes", "setTimeout", "Promise", "resolve", "all", "_extends", "mount", "before", "Boolean"]
}
